{"version":3,"sources":["lib/constants.js","lib/filters/atomic.js","lib/filters/blocks.js","lib/filters/styles.js","lib/filters/entities.js","lib/filters/text.js","lib/filters/editor.js","lib/filters/selection.js","demo/components/SentryBoundary.js","demo/components/Highlight.js","demo/components/Link.js","demo/components/Image.js","demo/components/FilterableEditor.js","demo/components/ClipboardLogger.js","demo/components/App.js","index.js"],"names":["ATOMIC","UNSTYLED","UNORDERED_LIST_ITEM","ORDERED_LIST_ITEM","preserveAtomicBlocks","content","blockMap","getBlockMap","perservedBlocks","filter","block","text","getText","getEntityAt","includes","map","set","size","merge","resetAtomicBlocks","blocks","normalisedBlocks","getType","getInlineStyleAt","chars","getCharacterList","slice","char","newChar","getStyle","forEach","type","CharacterMetadata","removeStyle","characterList","removeInvalidAtomicBlocks","allowlist","filteredBlocks","isValid","entityKey","getEntity","some","t","removeInvalidDepthBlocks","getDepth","preserveBlockByText","rules","match","newBlock","matchingRule","find","rule","RegExp","test","exec","sliceOffset","length","startOffset","shift","depth","limitBlockDepth","max","changedBlocks","filterBlockTypes","filterInlineStyles","altered","cloneEntities","newContent","encounteredEntities","shouldCloneEntity","firstChar","key","push","newChars","findEntityRanges","start","end","get","entity","newKey","createEntity","getMutability","getData","getLastCreatedEntityKey","i","applyEntity","filterEntityRanges","filterFn","filterEntityData","entityTypes","entities","Object","keys","data","config","attributes","newData","reduce","attrs","attr","hasOwnProperty","replaceEntityData","replaceTextBySpaces","characters","newText","txt","replace","repeat","BLOCK_PREFIX_RULES","filterEditorState","options","editorState","styles","maxNesting","whitespacedCharacters","blockTextRules","filters","bind","concat","entityData","entityType","blockType","e","whitelist","every","check","hasData","shouldKeepEntityByAttribute","shouldRemoveImageEntity","getCurrentContent","nextContent","EditorState","moveFocusToEnd","currentContent","ContentState","createFromText","nextState","selection","getSelection","anchorKey","getAnchorKey","anchorBlock","getBlockForKey","isCollapsed","nextAnchorKey","keySeq","reverse","k","getKeyAfter","blockEndOffset","nextSelection","focusKey","anchorOffset","focusOffset","acceptSelection","applyContentWithSelection","c","SentryBoundary","props","state","error","errorInfo","isRavenAvailable","window","Raven","this","setState","captureException","extra","children","className","onClick","lastEventId","showReportDialog","href","target","rel","style","textDecoration","location","reload","Component","onCopy","value","hidden","document","createElement","body","appendChild","select","execCommand","removeChild","Highlight","position","right","width","resize","minHeight","readOnly","linkStrategy","contentBlock","callback","contentState","character","Link","title","url","Image","src","alt","BLOCKS","unstyled","BLOCKS_EXTENDED","blockquote","STYLES","BOLD","ITALIC","STYLES_EXTENDED","CODE","STRIKETHROUGH","UNDERLINE","ENTITIES","label","FilterableEditor","extended","decorator","CompositeDecorator","strategy","component","save","sessionStorage","getItem","convertFromRaw","JSON","parse","createWithContent","createEmpty","onChange","keyBindingFn","toggleStyle","toggleBlock","toggleEntity","blockRenderer","handleKeyCommand","filtered","filteredState","getLastChangeType","setItem","stringify","convertToRaw","RichUtils","toggleInlineStyle","preventDefault","toggleBlockType","AtomicBlockUtils","insertAtomicBlock","toggleLink","editable","event","keyCode","newState","onTab","getDefaultKeyBinding","command","onMouseDown","stripPastedStyles","blockRendererFn","ClipboardLogger","useState","setValue","log","setLog","useEffect","onPaste","clipboardData","html","addEventListener","removeEventListener","App","mount","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.34e5cdc5.chunk.js","sourcesContent":["// @flow\nexport const ATOMIC = \"atomic\"\nexport const UNSTYLED = \"unstyled\"\nexport const UNORDERED_LIST_ITEM = \"unordered-list-item\"\nexport const ORDERED_LIST_ITEM = \"ordered-list-item\"\n\nexport const IMAGE = \"IMAGE\"\n","// @flow\nimport { CharacterMetadata, ContentState } from \"draft-js\"\n\nimport { ATOMIC } from \"../constants\"\n\n/**\n * Creates atomic blocks where they would be required for a block-level entity\n * to work correctly, when such an entity exists.\n * Note: at the moment, this is only useful for IMAGE entities that Draft.js\n * injects on arbitrary blocks on paste.\n */\nexport const preserveAtomicBlocks = (content: ContentState) => {\n  const blockMap = content.getBlockMap()\n\n  const perservedBlocks = blockMap\n    .filter((block) => {\n      const text = block.getText()\n      const entityKey = block.getEntityAt(0)\n      const shouldPreserve = entityKey && [\"📷\", \" \", \"📷 \"].includes(text)\n\n      return shouldPreserve\n    })\n    .map((block) => block.set(\"type\", ATOMIC))\n\n  if (perservedBlocks.size !== 0) {\n    return content.merge({\n      blockMap: blockMap.merge(perservedBlocks),\n    })\n  }\n\n  return content\n}\n\n/**\n * Resets atomic blocks to have a single-space char and no styles.\n * This is how they are stored by Draft.js by default.\n */\nexport const resetAtomicBlocks = (content: ContentState) => {\n  const blockMap = content.getBlockMap()\n  let blocks = blockMap\n\n  const normalisedBlocks = blocks\n    .filter(\n      (block) =>\n        block.getType() === ATOMIC &&\n        (block.getText() !== \" \" || block.getInlineStyleAt(0).size !== 0),\n    )\n    .map((block) => {\n      // Retain only the first character, and remove all of its styles.\n      const chars = block\n        .getCharacterList()\n        .slice(0, 1)\n        .map((char) => {\n          let newChar = char\n\n          char.getStyle().forEach((type) => {\n            newChar = CharacterMetadata.removeStyle(newChar, type)\n          })\n\n          return newChar\n        })\n\n      return block.merge({\n        text: \" \",\n        characterList: chars,\n      })\n    })\n\n  if (normalisedBlocks.size !== 0) {\n    blocks = blocks.merge(normalisedBlocks)\n  }\n\n  return content.merge({\n    blockMap: blocks,\n  })\n}\n\n/**\n * Removes atomic blocks for which the entity type isn't allowed.\n */\nexport const removeInvalidAtomicBlocks = (\n  allowlist: $ReadOnlyArray<{ type: string }>,\n  content: ContentState,\n) => {\n  const blockMap = content.getBlockMap()\n\n  const isValidAtomicBlock = (block) => {\n    if (block.getType() !== ATOMIC) {\n      return true\n    }\n\n    const entityKey = block.getEntityAt(0)\n    let isValid\n\n    if (entityKey) {\n      const type = content.getEntity(entityKey).getType()\n\n      isValid = allowlist.some((t) => t.type === type)\n    } else {\n      isValid = false\n    }\n\n    return isValid\n  }\n\n  const filteredBlocks = blockMap.filter(isValidAtomicBlock)\n\n  if (filteredBlocks.size !== blockMap.size) {\n    return content.merge({\n      blockMap: filteredBlocks,\n    })\n  }\n\n  return content\n}\n","// @flow\nimport { ContentState } from \"draft-js\"\nimport { UNSTYLED, UNORDERED_LIST_ITEM, ORDERED_LIST_ITEM } from \"../constants\"\n\n/**\n * Removes blocks that have a non-zero depth, and aren't list items.\n * Happens with Apple Pages inserting `unstyled` items between list items.\n */\nexport const removeInvalidDepthBlocks = (content: ContentState) => {\n  const blockMap = content.getBlockMap()\n\n  const isValidDepthBlock = (block) => {\n    const isListBlock = [UNORDERED_LIST_ITEM, ORDERED_LIST_ITEM].includes(\n      block.getType(),\n    )\n\n    return isListBlock || block.getDepth() === 0\n  }\n\n  const filteredBlocks = blockMap.filter(isValidDepthBlock)\n\n  if (filteredBlocks.size !== blockMap.size) {\n    return content.merge({\n      blockMap: filteredBlocks,\n    })\n  }\n\n  return content\n}\n\n/**\n * Changes block type and depth based on the block's text. – some word processors\n * add a specific prefix within the text, eg. \"· Bulleted list\" in Word 2010.\n * Also removes the matched text.\n * This is meant first and foremost for list items where the list bullet or numeral\n * ends up in the text. Other use cases may not be well covered.\n */\nexport const preserveBlockByText = (\n  rules: $ReadOnlyArray<{\n    test: string,\n    type: string,\n    depth: number,\n  }>,\n  content: ContentState,\n) => {\n  const blockMap = content.getBlockMap()\n\n  const blocks = blockMap\n    .filter((block) => block.getType() === \"unstyled\")\n    .map((block) => {\n      const text = block.getText()\n      let newBlock = block\n      let match\n\n      const matchingRule = rules.find((rule) => {\n        match = new RegExp(rule.test).exec(text)\n        return match !== null\n      })\n\n      if (matchingRule && match && match[0]) {\n        const text = block.getText()\n        const entity = block.getEntityAt(0)\n\n        // Special case – do not convert the block if there is an entity at the start, and the matching text is the full block’s text.\n        // This can happen in Word for equations, which are injected as images with text \"📷 \".\n        if (entity && match[0] === text) {\n          return newBlock\n        }\n\n        // Unicode gotcha:\n        // At the moment, Draft.js stores one CharacterMetadata in the character list\n        // for each \"character\" in an astral symbol. \"📷\" has a length of 2, is stored with two CharacterMetadata instances.\n        // What matters is that we remove the correct number of chars from both\n        // the text and the List<CharacterMetadata>. So – we want to use the ES5 way of counting\n        // a string length.\n        // See https://mathiasbynens.be/notes/javascript-unicode.\n        const sliceOffset = match[0].length\n\n        // Maintain persistence in the list while removing chars from the start.\n        // https://github.com/facebook/draft-js/blob/788595984da7c1e00d1071ea82b063ff87140be4/src/model/transaction/removeRangeFromContentState.js#L333\n        let chars = block.getCharacterList()\n        let startOffset = 0\n        while (startOffset < sliceOffset) {\n          chars = chars.shift()\n          startOffset++\n        }\n\n        newBlock = newBlock.merge({\n          type: matchingRule.type,\n          depth: matchingRule.depth,\n          text: text.slice(sliceOffset),\n          characterList: chars,\n        })\n      }\n\n      return newBlock\n    })\n\n  return blocks.size === 0\n    ? content\n    : content.merge({\n        blockMap: blockMap.merge(blocks),\n      })\n}\n\n/**\n * Resets the depth of all the content to at most max.\n */\nexport const limitBlockDepth = (max: number, content: ContentState) => {\n  const blockMap = content.getBlockMap()\n\n  const changedBlocks = blockMap\n    .filter((block) => block.getDepth() > max)\n    .map((block) => block.set(\"depth\", max))\n\n  return changedBlocks.size === 0\n    ? content\n    : content.merge({\n        blockMap: blockMap.merge(changedBlocks),\n      })\n}\n\n/**\n * Converts all block types not present in the list to unstyled.\n * Also sets depth to 0 (for potentially nested list items).\n */\nexport const filterBlockTypes = (\n  allowlist: $ReadOnlyArray<string>,\n  content: ContentState,\n) => {\n  const blockMap = content.getBlockMap()\n\n  const changedBlocks = blockMap\n    .filter((block) => !allowlist.includes(block.getType()))\n    .map((block) =>\n      block.merge({\n        type: UNSTYLED,\n        depth: 0,\n      }),\n    )\n\n  return changedBlocks.size === 0\n    ? content\n    : content.merge({\n        blockMap: blockMap.merge(changedBlocks),\n      })\n}\n","// @flow\nimport { ContentState, CharacterMetadata } from \"draft-js\"\n\n/**\n * Removes all styles not present in the list.\n */\nexport const filterInlineStyles = (\n  allowlist: $ReadOnlyArray<string>,\n  content: ContentState,\n) => {\n  const blockMap = content.getBlockMap()\n\n  const blocks = blockMap.map((block) => {\n    let altered = false\n\n    const chars = block.getCharacterList().map((char) => {\n      let newChar = char\n\n      char\n        .getStyle()\n        .filter((type) => !allowlist.includes(type))\n        .forEach((type) => {\n          altered = true\n          newChar = CharacterMetadata.removeStyle(newChar, type)\n        })\n\n      return newChar\n    })\n\n    return altered ? block.set(\"characterList\", chars) : block\n  })\n\n  return content.merge({\n    blockMap: blockMap.merge(blocks),\n  })\n}\n","// @flow\nimport { CharacterMetadata, ContentState } from \"draft-js\"\nimport { ATOMIC, IMAGE } from \"../constants\"\n\n/**\n * Clones entities in the entityMap, so each range points to its own entity instance.\n * This only clones entities as necessary – if an entity is only referenced\n * in a single range, it won't be changed.\n */\nexport const cloneEntities = (content: ContentState) => {\n  let newContent = content\n  const blockMap = newContent.getBlockMap()\n\n  const encounteredEntities = []\n\n  // Marks ranges that need cloning, because their entity has been encountered previously.\n  const shouldCloneEntity = (firstChar) => {\n    const key = firstChar.getEntity()\n\n    if (key) {\n      if (encounteredEntities.includes(key)) {\n        return true\n      }\n\n      encounteredEntities.push(key)\n    }\n\n    return false\n  }\n\n  // We're going to update blocks that contain ranges pointing at the same entity as other ranges.\n  const blocks = blockMap.map((block) => {\n    let newChars = block.getCharacterList()\n    let altered = false\n\n    // Updates ranges for which the entity needs to be cloned.\n    const updateRangeWithClone = (start, end) => {\n      const key = newChars.get(start).getEntity()\n      const entity = newContent.getEntity(key)\n\n      newContent = newContent.createEntity(\n        entity.getType(),\n        entity.getMutability(),\n        entity.getData(),\n      )\n      const newKey = newContent.getLastCreatedEntityKey()\n\n      // Update all of the chars in the range with the new entity.\n      newChars = newChars.map((char, i) => {\n        if (start <= i && i <= end) {\n          return CharacterMetadata.applyEntity(char, newKey)\n        }\n\n        return char\n      })\n\n      altered = true\n    }\n\n    block.findEntityRanges(shouldCloneEntity, updateRangeWithClone)\n\n    return altered ? block.set(\"characterList\", newChars) : block\n  })\n\n  return newContent.merge({\n    blockMap: blockMap.merge(blocks),\n  })\n}\n\n/*:: import type { BlockNode } from \"draft-js/lib/BlockNode.js.flow\" */\n\n/**\n * Filters entity ranges (where entities are applied on text) based on the result of\n * the callback function. Returning true keeps the entity range, false removes it.\n * Draft.js automatically removes entities if they are not applied on any text.\n */\nexport const filterEntityRanges = (\n  filterFn: (\n    content: ContentState,\n    entityKey: string,\n    block: BlockNode,\n  ) => boolean,\n  content: ContentState,\n) => {\n  const blockMap = content.getBlockMap()\n\n  /*\n   * Removes entities from the character list if the entity isn't enabled.\n   * Also removes image entities placed outside of atomic blocks, which can happen\n   * on paste.\n   * A better approach would probably be to split the block where the image is and\n   * create an atomic block there, but that's another story. This is what Draft.js\n   * does when the copy-paste is all within one editor.\n   */\n  const blocks = blockMap.map((block) => {\n    let altered = false\n\n    const chars = block.getCharacterList().map((char) => {\n      const entityKey = char.getEntity()\n\n      if (entityKey) {\n        const shouldRemove = !filterFn(content, entityKey, block)\n\n        if (shouldRemove) {\n          altered = true\n          return CharacterMetadata.applyEntity(char, null)\n        }\n      }\n\n      return char\n    })\n\n    return altered ? block.set(\"characterList\", chars) : block\n  })\n\n  return content.merge({\n    blockMap: blockMap.merge(blocks),\n  })\n}\n\n/**\n * Keeps all entity types (images, links, documents, embeds) that are enabled.\n */\nexport const shouldKeepEntityType = (\n  allowlist: $ReadOnlyArray<{ type: string }>,\n  type: string,\n) => {\n  return allowlist.some((e) => e.type === type)\n}\n\n/**\n * Removes invalid images – they should only be in atomic blocks.\n * This only removes the image entity, not the camera emoji (📷) that Draft.js inserts.\n */\nexport const shouldRemoveImageEntity = (\n  entityType: string,\n  blockType: string,\n) => {\n  return entityType === IMAGE && blockType !== ATOMIC\n}\n\n/**\n * Filters entities based on the data they contain.\n */\nexport const shouldKeepEntityByAttribute = (\n  entityTypes: $ReadOnlyArray<{\n    type: string,\n    allowlist?: {\n      [attribute: string]: string | boolean,\n    },\n    // Deprecated. Use allowlist instead. Will be removed in a future release.\n    whitelist?: {\n      [attribute: string]: string | boolean,\n    },\n  }>,\n  entityType: string,\n  data: {},\n) => {\n  const config = entityTypes.find((t) => t.type === entityType)\n  // If no allowlist is defined, the filter keeps the entity.\n  const allowlist =\n    config && config.allowlist\n      ? config.allowlist\n      : config && config.whitelist\n      ? config.whitelist\n      : {}\n\n  const isValid = Object.keys(allowlist).every((attr) => {\n    const check = allowlist[attr]\n\n    if (typeof check === \"boolean\") {\n      const hasData = data.hasOwnProperty(attr)\n\n      return check ? hasData : !hasData\n    }\n\n    return new RegExp(check).test(data[attr])\n  })\n\n  return isValid\n}\n\n/**\n * Filters data on an entity to only retain what is allowed.\n * This is crucial for IMAGE and LINK, where Draft.js adds a lot\n * of unneeded attributes (width, height, etc).\n */\nexport const filterEntityData = (\n  entityTypes: $ReadOnlyArray<{\n    type: string,\n    attributes?: $ReadOnlyArray<string>,\n  }>,\n  content: ContentState,\n) => {\n  let newContent = content\n  const entities = {}\n\n  newContent.getBlockMap().forEach((block) => {\n    block.findEntityRanges((char) => {\n      const entityKey = char.getEntity()\n      if (entityKey) {\n        const entity = newContent.getEntity(entityKey)\n        entities[entityKey] = entity\n      }\n    })\n  })\n\n  Object.keys(entities).forEach((key) => {\n    const entity = entities[key]\n    const data = entity.getData()\n    const config = entityTypes.find((t) => t.type === entity.getType())\n    const allowlist = config ? config.attributes : null\n\n    // If no allowlist is defined, keep all of the data.\n    if (!allowlist) {\n      return data\n    }\n\n    const newData = allowlist.reduce((attrs, attr) => {\n      // We do not want to include undefined values if there is no data.\n      if (data.hasOwnProperty(attr)) {\n        attrs[attr] = data[attr]\n      }\n\n      return attrs\n    }, {})\n\n    newContent = newContent.replaceEntityData(key, newData)\n  })\n\n  return newContent\n}\n","// @flow\nimport { ContentState } from \"draft-js\"\n\n/**\n * Replaces the given characters by their equivalent length of spaces, in all blocks.\n */\nexport const replaceTextBySpaces = (\n  characters: $ReadOnlyArray<string>,\n  content: ContentState,\n) => {\n  const blockMap = content.getBlockMap()\n\n  const blocks = blockMap.map((block) => {\n    const text = block.getText()\n\n    // Only replaces the character(s) with as many spaces as their length,\n    // so that style and entity ranges are left undisturbed.\n    // If we want to completely remove the character, we also need to filter\n    // the corresponding CharacterMetadata entities.\n    const newText = characters.reduce((txt, char) => {\n      return txt.replace(new RegExp(char, \"g\"), \" \".repeat(char.length))\n    }, text)\n\n    return text !== newText ? block.set(\"text\", newText) : block\n  })\n\n  return content.merge({\n    blockMap: blockMap.merge(blocks),\n  })\n}\n","// @flow\nimport { ATOMIC, UNSTYLED } from \"../constants\"\nimport {\n  preserveAtomicBlocks,\n  resetAtomicBlocks,\n  removeInvalidAtomicBlocks,\n} from \"./atomic\"\nimport {\n  limitBlockDepth,\n  preserveBlockByText,\n  filterBlockTypes,\n  removeInvalidDepthBlocks,\n} from \"./blocks\"\nimport { filterInlineStyles } from \"./styles\"\nimport {\n  cloneEntities,\n  filterEntityData,\n  filterEntityRanges,\n  shouldKeepEntityType,\n  shouldRemoveImageEntity,\n  shouldKeepEntityByAttribute,\n} from \"./entities\"\nimport { replaceTextBySpaces } from \"./text\"\nimport { applyContentWithSelection } from \"./selection\"\n\nimport { ContentState } from \"draft-js\"\nimport type { EditorState as EditorStateType } from \"draft-js\"\n\ntype FilterOptions = {\n  // List of allowed block types. unstyled and atomic are always included.\n  blocks: $ReadOnlyArray<string>,\n  // List of allowed inline styles.\n  styles: $ReadOnlyArray<string>,\n  // List of allowed entities.\n  entities: $ReadOnlyArray<{\n    // Entity type, eg. \"LINK\"\n    type: string,\n    // Allowed attributes. Other attributes will be removed. If this is omitted, all attributes are kept.\n    attributes?: $ReadOnlyArray<string>,\n    // Refine which entities are kept by matching acceptable values with regular expression patterns.\n    // It's also possible to use \"true\" to signify that a field is required to be present,\n    // and \"false\" for fields required to be absent.\n    // If this is omitted, all entities are kept.\n    allowlist?: {\n      [attribute: string]: string | boolean,\n    },\n    // Deprecated. Use allowlist instead. Will be removed in a future release.\n    whitelist?: {\n      [attribute: string]: string | boolean,\n    },\n  }>,\n  // Maximum amount of depth for lists (0 = no nesting).\n  maxNesting: number,\n  // Characters to replace with whitespace.\n  whitespacedCharacters: Array<string>,\n  // Optional: Rules used to automatically convert blocks from one type to another\n  // based on the block’s text. Also supports setting the block depth.\n  // Defaults to the filters’ built-in block prefix rules.\n  blockTextRules?: $ReadOnlyArray<{\n    // A regex as a string, to match against block text, e.g. \"^(◦|o |o\\t)\".\n    test: string,\n    // The type to convert the block to if the test regex matches.\n    type: string,\n    // The depth to set (e.g. for list items with different prefixes per depth).\n    depth: number,\n  }>,\n}\n\nconst BLOCK_PREFIX_RULES = [\n  {\n    // https://regexper.com/#%5E(%C2%B7%20%7C%E2%80%A2%5Ct%7C%E2%80%A2%7C%F0%9F%93%B7%20%7C%5Ct%7C%20%5Ct)\n    test: \"^(· |•\\t|•|📷 |\\t| \\t)\",\n    type: \"unordered-list-item\",\n    depth: 0,\n  },\n  // https://regexper.com/#%5E(%E2%97%A6%7Co%20%7Co%5Ct)\n  { test: \"^(◦|o |o\\t)\", type: \"unordered-list-item\", depth: 1 },\n  // https://regexper.com/#%5E(%C2%A7%20%7C%EF%82%A7%5Ct%7C%E2%97%BE)\n  { test: \"^(§ |\\t|◾)\", type: \"unordered-list-item\", depth: 2 },\n  {\n    // https://regexper.com/#%5E1%7B0%2C1%7D%5Cd%5C.%5B%20%5Ct%5D\n    test: \"^1{0,1}\\\\d\\\\.[ \\t]\",\n    type: \"ordered-list-item\",\n    depth: 0,\n  },\n  {\n    // Roman numerals from I to XX.\n    // https://regexper.com/#%5Ex%7B0%2C1%7D(i%7Cii%7Ciii%7Civ%7Cv%7Cvi%7Cvii%7Cviii%7Cix%7Cx)%5C.%5B%20%5Ct%5D\n    test: \"^x{0,1}(i|ii|iii|iv|v|vi|vii|viii|ix|x)\\\\.[ \\t]\",\n    type: \"ordered-list-item\",\n    depth: 2,\n  },\n  {\n    // There is a clash between this and the i., v., x. roman numerals.\n    // Those tests are executed in order though, so the roman numerals take priority.\n    // We do not want to match too many letters (say aa.), because those could be actual text.\n    // https://regexper.com/#%5E%5Ba-z%5D%5C.%5B%20%5Ct%5D\n    test: \"^[a-z]\\\\.[ \\t]\",\n    type: \"ordered-list-item\",\n    depth: 1,\n  },\n]\n\n/**\n * Applies filtering and preservation operations to the editor content,\n * to restrict it to supported patterns.\n * Will not alter the editor state if there are no changes to make.\n */\nexport const filterEditorState = (\n  options: FilterOptions,\n  editorState: EditorStateType,\n) => {\n  const {\n    blocks,\n    styles,\n    entities,\n    maxNesting,\n    whitespacedCharacters,\n    blockTextRules = BLOCK_PREFIX_RULES,\n  } = options\n  const shouldKeepEntityRange = (content, entityKey, block) => {\n    const entity = content.getEntity(entityKey)\n    const entityData = entity.getData()\n    const entityType = entity.getType()\n    const blockType = block.getType()\n\n    return (\n      shouldKeepEntityType(entities, entityType) &&\n      shouldKeepEntityByAttribute(entities, entityType, entityData) &&\n      !shouldRemoveImageEntity(entityType, blockType)\n    )\n  }\n\n  // Order matters. Some filters may need the information filtered out by others.\n  const filters = [\n    // 1. clean up blocks.\n    removeInvalidDepthBlocks,\n    preserveBlockByText.bind(null, blockTextRules),\n    limitBlockDepth.bind(null, maxNesting),\n    // 2. reset styles and blocks.\n    filterInlineStyles.bind(null, styles),\n    // Add block types that are always enabled in Draft.js.\n    filterBlockTypes.bind(null, blocks.concat([UNSTYLED, ATOMIC])),\n    // 4. Process atomic blocks before processing entities.\n    preserveAtomicBlocks,\n    resetAtomicBlocks,\n    // 5. Remove entity ranges (and linked entities)\n    filterEntityRanges.bind(null, shouldKeepEntityRange),\n    // 6. Remove/filter entity-related matters.\n    removeInvalidAtomicBlocks.bind(null, entities),\n    filterEntityData.bind(null, entities),\n    // 7. Clone entities for which it is necessary.\n    cloneEntities,\n    // 8. Finally, do text operations.\n    replaceTextBySpaces.bind(null, whitespacedCharacters),\n  ]\n\n  const content = editorState.getCurrentContent()\n  const nextContent = filters.reduce(\n    (c, filter: (ContentState) => ContentState) => filter(c),\n    content,\n  )\n\n  return applyContentWithSelection(editorState, content, nextContent)\n}\n","// @flow\nimport { EditorState } from \"draft-js\"\nimport { ContentState } from \"draft-js\"\n\n/**\n * Applies the new content to the editor state, optionally moving the selection\n * to be on a valid block, inserting one if needed.\n * See https://github.com/thibaudcolas/draftjs-filters/issues/27.\n */\nexport const applyContentWithSelection = (\n  editorState: EditorState,\n  content: ContentState,\n  nextContent: ContentState,\n) => {\n  // If the content is the same before/after, return the state unaltered.\n  if (nextContent === content) {\n    return editorState\n  }\n\n  // If the block map is empty, insert a new unstyled block and put the selection on it.\n  if (nextContent.getBlockMap().size === 0) {\n    return EditorState.moveFocusToEnd(\n      EditorState.set(editorState, {\n        currentContent: ContentState.createFromText(\"\"),\n      }),\n    )\n  }\n\n  const nextState = EditorState.set(editorState, {\n    currentContent: nextContent,\n  })\n  const selection = editorState.getSelection()\n  const anchorKey = selection.getAnchorKey()\n  const anchorBlock = nextContent.getBlockForKey(anchorKey)\n\n  // We only support moving collapsed selections, which is the only behavior of selections after paste.\n  // And if the anchor block is valid, no need to move the selection.\n  const shouldKeepSelection = !selection.isCollapsed() || !!anchorBlock\n  if (shouldKeepSelection) {\n    return nextState\n  }\n\n  const nextKeys = nextContent.getBlockMap().keySeq()\n\n  // Find the first key whose successor is different in the old content (because a block was removed).\n  // Starting from the end so the selection is preserved towards the last preserved block in the filtered region.\n  const nextAnchorKey = nextKeys\n    .reverse()\n    .find((k) => content.getKeyAfter(k) !== nextContent.getKeyAfter(k))\n\n  // If the selection was already misplaced before paste, we do not move it.\n  if (nextAnchorKey) {\n    const nextSelectedBlock = nextContent.getBlockForKey(nextAnchorKey)\n    const blockEndOffset = nextSelectedBlock.getText().length\n    const nextSelection = selection.merge({\n      anchorKey: nextAnchorKey,\n      focusKey: nextAnchorKey,\n      anchorOffset: blockEndOffset,\n      focusOffset: blockEndOffset,\n    })\n\n    return EditorState.acceptSelection(nextState, nextSelection)\n  }\n\n  return nextState\n}\n","// @flow\nimport React, { Component } from \"react\"\nimport type { Node } from \"react\"\n\ntype Props = {\n  children: Node,\n}\n\ntype State = {\n  error: ?Error,\n}\n\nclass SentryBoundary extends Component<Props, State> {\n  constructor(props: Props) {\n    super(props)\n    this.state = { error: null }\n  }\n\n  componentDidCatch(error: Error, errorInfo: { componentStack: string }) {\n    const isRavenAvailable = !!window.Raven\n    this.setState({ error })\n\n    if (isRavenAvailable) {\n      window.Raven.captureException(error, { extra: errorInfo })\n    }\n  }\n\n  render() {\n    const { children } = this.props\n    const { error } = this.state\n    const isRavenAvailable = !!window.Raven\n\n    return error ? (\n      <div className=\"DraftEditor-root\">\n        <div className=\"DraftEditor-editorContainer\">\n          <div className=\"public-DraftEditor-content\">\n            {/* <img src={oops} /> */}\n            <div className=\"u-text-center\">\n              <p>Oops. The editor just crashed.</p>\n              <p>\n                Our team has been notified. You can provide us with more\n                information if you want to.\n              </p>\n              <div>\n                {isRavenAvailable ? (\n                  <button\n                    type=\"button\"\n                    onClick={() =>\n                      window.Raven.lastEventId() &&\n                      window.Raven.showReportDialog()\n                    }\n                  >\n                    Submit a report\n                  </button>\n                ) : (\n                  <a\n                    href=\"https://github.com/thibaudcolas/draftjs-filters/issues\"\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    style={{\n                      textDecoration: \"underline\",\n                    }}\n                  >\n                    Open a GitHub issue\n                  </a>\n                )}\n                <span>&nbsp;</span>\n                <button\n                  type=\"button\"\n                  onClick={() => window.location.reload(false)}\n                >\n                  Reload the page\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    ) : (\n      children\n    )\n  }\n}\n\nexport default SentryBoundary\n","// @flow\nimport React from \"react\"\n\ntype Props = {\n  value: string,\n}\n\nconst onCopy = (value) => {\n  const hidden = document.createElement(\"textarea\")\n  hidden.value = value\n  // $FlowFixMe\n  document.body.appendChild(hidden)\n  hidden.select()\n  document.execCommand(\"copy\")\n  // $FlowFixMe\n  document.body.removeChild(hidden)\n}\n\nconst Highlight = ({ value }: Props) => (\n  <div style={{ position: \"relative\" }}>\n    <button\n      onClick={onCopy.bind(null, value)}\n      style={{ position: \"absolute\", right: \"1rem\" }}\n    >\n      Copy\n    </button>\n    <textarea\n      style={{ width: \"100%\", resize: \"vertical\", minHeight: \"100px\" }}\n      readOnly\n      value={value}\n    ></textarea>\n  </div>\n)\n\nexport default Highlight\n","// @flow\nimport React from \"react\"\nimport type { Node } from \"react\"\nimport { ContentState } from \"draft-js\"\nimport type { ContentBlock } from \"draft-js\"\n\ntype Props = {\n  contentState: ContentState,\n  entityKey: string,\n  children: Node,\n}\n\nexport const linkStrategy = (\n  contentBlock: ContentBlock,\n  callback: (start: number, end: number) => void,\n  contentState: ContentState,\n) => {\n  contentBlock.findEntityRanges((character) => {\n    const entityKey = character.getEntity()\n    return (\n      entityKey !== null &&\n      contentState.getEntity(entityKey).getType() === \"LINK\"\n    )\n  }, callback)\n}\n\nconst Link = ({ contentState, entityKey, children }: Props) => {\n  const entity = contentState.getEntity(entityKey)\n  return (\n    <span className=\"link\" title={entity.getData().url}>\n      {children}\n    </span>\n  )\n}\n\nexport default Link\n","// @flow\nimport React from \"react\"\nimport type { ContentBlock, ContentState } from \"draft-js\"\n\nconst Image = ({\n  block,\n  contentState,\n}: {\n  block: ContentBlock,\n  contentState: ContentState,\n}) => {\n  const entityKey = block.getEntityAt(0)\n  const src = entityKey\n    ? contentState.getEntity(entityKey).getData().src\n    : \"404.svg\"\n\n  return <img src={src} alt=\"\" width=\"256\" />\n}\n\nexport default Image\n","// @flow\nimport React, { Component } from \"react\"\nimport {\n  Editor,\n  EditorState,\n  RichUtils,\n  convertToRaw,\n  CompositeDecorator,\n  AtomicBlockUtils,\n  convertFromRaw,\n  getDefaultKeyBinding,\n} from \"draft-js\"\nimport type { ContentBlock } from \"draft-js\"\nimport type { DraftEntityType } from \"draft-js/lib/DraftEntityType.js.flow\"\n\nimport { filterEditorState } from \"../../lib/index\"\n\nimport SentryBoundary from \"./SentryBoundary\"\nimport Highlight from \"./Highlight\"\nimport Link, { linkStrategy } from \"./Link\"\nimport Image from \"./Image\"\n\nimport \"./FilterableEditor.css\"\n\nconst BLOCKS = {\n  unstyled: \"P\",\n  \"unordered-list-item\": \"UL\",\n  \"header-one\": \"H1\",\n  \"header-two\": \"H2\",\n  \"header-three\": \"H3\",\n}\n\nconst BLOCKS_EXTENDED = {\n  unstyled: \"P\",\n  \"unordered-list-item\": \"UL\",\n  \"ordered-list-item\": \"OL\",\n  \"header-one\": \"H1\",\n  \"header-two\": \"H2\",\n  \"header-three\": \"H3\",\n  \"header-four\": \"H4\",\n  \"header-five\": \"H5\",\n  \"header-six\": \"H6\",\n  blockquote: \"❝\",\n  \"code-block\": \"{ }\",\n}\n\nconst STYLES = {\n  BOLD: \"B\",\n  ITALIC: \"I\",\n}\n\nconst STYLES_EXTENDED = {\n  BOLD: \"B\",\n  ITALIC: \"I\",\n  CODE: \"`\",\n  STRIKETHROUGH: \"~\",\n  UNDERLINE: \"_\",\n}\n\nconst ENTITIES = [\n  {\n    type: \"LINK\",\n    label: \"🔗\",\n    attributes: [\"url\"],\n    allowlist: {\n      href: \"^(http:|https:|undefined$)\",\n    },\n  },\n  {\n    type: \"IMAGE\",\n    label: \"📷\",\n    attributes: [\"src\"],\n    allowlist: {\n      src: \"^http|\\\\./\",\n    },\n  },\n]\n\nconst MAX_NESTING = 1\n\nconst MAX_NESTING_EXTENDED = 4\n\ntype Props = {\n  filtered: boolean,\n  extended: boolean,\n}\n\ntype State = {\n  editorState: EditorState,\n}\n\n/**\n * Demo editor, which can be configured to filter content on paste.\n */\nclass FilterableEditor extends Component<Props, State> {\n  constructor(props: Props) {\n    super(props)\n    const { extended } = props\n\n    const decorator = new CompositeDecorator([\n      {\n        strategy: linkStrategy,\n        component: Link,\n      },\n    ])\n\n    const save = window.sessionStorage.getItem(\"extended\")\n    let editorState\n\n    if (extended && save) {\n      const content = convertFromRaw(JSON.parse(save))\n      // $FlowFixMe\n      editorState = EditorState.createWithContent(content, decorator)\n    } else {\n      // $FlowFixMe\n      editorState = EditorState.createEmpty(decorator)\n    }\n\n    this.state = {\n      editorState: editorState,\n    }\n    this.onChange = this.onChange.bind(this)\n    this.keyBindingFn = this.keyBindingFn.bind(this)\n    this.toggleStyle = this.toggleStyle.bind(this)\n    this.toggleBlock = this.toggleBlock.bind(this)\n    this.toggleEntity = this.toggleEntity.bind(this)\n    this.blockRenderer = this.blockRenderer.bind(this)\n    this.handleKeyCommand = this.handleKeyCommand.bind(this)\n  }\n\n  /* :: onChange: (nextState: EditorState) => void; */\n  onChange(nextState: EditorState) {\n    const { filtered, extended } = this.props\n    const { editorState } = this.state\n    let filteredState = nextState\n\n    if (filtered) {\n      const shouldFilterPaste =\n        nextState.getCurrentContent() !== editorState.getCurrentContent() &&\n        filteredState.getLastChangeType() === \"insert-fragment\"\n\n      if (shouldFilterPaste) {\n        const filters = {\n          blocks: Object.keys(extended ? BLOCKS_EXTENDED : BLOCKS),\n          styles: Object.keys(extended ? STYLES_EXTENDED : STYLES),\n          entities: ENTITIES,\n          maxNesting: extended ? MAX_NESTING_EXTENDED : MAX_NESTING,\n          whitespacedCharacters: [\"\\n\", \"\\t\", \"📷\"],\n        }\n\n        filteredState = filterEditorState(filters, filteredState)\n      }\n    }\n\n    this.setState({ editorState: filteredState })\n\n    window.sessionStorage.setItem(\n      `content`,\n      JSON.stringify(convertToRaw(nextState.getCurrentContent())),\n    )\n  }\n\n  /* :: toggleStyle: (type: string, e: Event) => void; */\n  toggleStyle(type: string, e: Event) {\n    const { editorState } = this.state\n    this.onChange(RichUtils.toggleInlineStyle(editorState, type))\n\n    e.preventDefault()\n  }\n\n  /* :: toggleBlock: (type: string, e: Event) => void; */\n  toggleBlock(type: string, e: Event) {\n    const { editorState } = this.state\n    this.onChange(RichUtils.toggleBlockType(editorState, type))\n\n    e.preventDefault()\n  }\n\n  /* :: toggleEntity: (type: DraftEntityType) => void; */\n  toggleEntity(type: DraftEntityType) {\n    const { editorState } = this.state\n    let content = editorState.getCurrentContent()\n\n    if (type === \"IMAGE\") {\n      content = content.createEntity(type, \"IMMUTABLE\", {\n        src: \"./word-toolbars-overload.jpg\",\n      })\n      const entityKey = content.getLastCreatedEntityKey()\n      this.onChange(\n        AtomicBlockUtils.insertAtomicBlock(editorState, entityKey, \" \"),\n      )\n    } else {\n      content = content.createEntity(type, \"MUTABLE\", {\n        url: \"http://www.example.com/\",\n      })\n      const entityKey = content.getLastCreatedEntityKey()\n      const selection = editorState.getSelection()\n      this.onChange(RichUtils.toggleLink(editorState, selection, entityKey))\n    }\n  }\n\n  /* :: blockRenderer: (block: ContentBlock) => { component: typeof Component, editable: boolean }; */\n  blockRenderer(block: ContentBlock) {\n    if (block.getType() !== \"atomic\") {\n      return null\n    }\n\n    return {\n      component: Image,\n      editable: false,\n    }\n  }\n\n  /* :: keyBindingFn: (event: SyntheticKeyboardEvent<>) => void; */\n  keyBindingFn(event: SyntheticKeyboardEvent /*:: <> */) {\n    const TAB = 9\n    switch (event.keyCode) {\n      case TAB: {\n        const { extended } = this.props\n        const { editorState } = this.state\n        const maxNesting = extended ? MAX_NESTING_EXTENDED : MAX_NESTING\n        const newState = RichUtils.onTab(event, editorState, maxNesting)\n        this.onChange(newState)\n        return null\n      }\n      default: {\n        return getDefaultKeyBinding(event)\n      }\n    }\n  }\n\n  /* :: handleKeyCommand: (command: string) => \"handled\" | \"not-handled\"; */\n  handleKeyCommand(command: string) {\n    const { editorState } = this.state\n\n    let newState = RichUtils.handleKeyCommand(editorState, command)\n\n    if (newState) {\n      this.onChange(newState)\n      return \"handled\"\n    }\n\n    return \"not-handled\"\n  }\n\n  render() {\n    const { extended } = this.props\n    const { editorState } = this.state\n    const styles = extended ? STYLES_EXTENDED : STYLES\n    const blocks = extended ? BLOCKS_EXTENDED : BLOCKS\n\n    return (\n      <div className=\"FilterableEditor\">\n        <SentryBoundary>\n          <div className=\"EditorToolbar\">\n            {Object.keys(styles).map((type) => (\n              <button\n                key={type}\n                onMouseDown={this.toggleStyle.bind(this, type)}\n              >\n                {STYLES_EXTENDED[type]}\n              </button>\n            ))}\n            {Object.keys(blocks).map((type) => (\n              <button\n                key={type}\n                onMouseDown={this.toggleBlock.bind(this, type)}\n              >\n                {BLOCKS_EXTENDED[type]}\n              </button>\n            ))}\n            {ENTITIES.map((type) => (\n              <button\n                key={type.type}\n                onMouseDown={this.toggleEntity.bind(this, type.type)}\n              >\n                {type.label}\n              </button>\n            ))}\n          </div>\n          <Editor\n            editorState={editorState}\n            onChange={this.onChange}\n            stripPastedStyles={false}\n            blockRendererFn={this.blockRenderer}\n            keyBindingFn={this.keyBindingFn}\n            handleKeyCommand={this.handleKeyCommand}\n          />\n        </SentryBoundary>\n        <details>\n          <summary>\n            <span className=\"link\">Debug</span>\n          </summary>\n          <Highlight\n            value={JSON.stringify(\n              convertToRaw(editorState.getCurrentContent()),\n              null,\n              2,\n            )}\n          />\n        </details>\n      </div>\n    )\n  }\n}\n\nexport default FilterableEditor\n","// @flow\nimport React, { useEffect, useState } from \"react\"\nimport Highlight from \"./Highlight\"\n\nconst ClipboardLogger = () => {\n  const [target, setValue] = useState(\"\")\n  const [log, setLog] = useState([])\n  useEffect(() => {\n    const onPaste = (e: ClipboardEvent) => {\n      const text = e.clipboardData ? e.clipboardData.getData(\"text/plain\") : \"\"\n      const html = e.clipboardData ? e.clipboardData.getData(\"text/html\") : \"\"\n      setLog(log.concat([{ text, html }]))\n    }\n    document.addEventListener(\"paste\", onPaste)\n\n    return () => {\n      document.removeEventListener(\"paste\", onPaste)\n    }\n  })\n  return (\n    <div>\n      <p>Paste here:</p>\n      <textarea\n        value={target}\n        onChange={(e) => setValue(e.target.value)}\n      ></textarea>\n      {log.map(({ text, html }, i) => {\n        return (\n          <div key={i}>\n            <p>{`${i}: ${text.slice(0, 50)}…`}</p>\n            <Highlight value={html}></Highlight>\n          </div>\n        )\n      })}\n    </div>\n  )\n}\n\nexport default ClipboardLogger\n","// @flow\nimport React, { Component } from \"react\"\nimport \"./App.css\"\n\nimport FilterableEditor from \"./FilterableEditor\"\nimport ClipboardLogger from \"./ClipboardLogger\"\n\nclass App extends Component<{}> {\n  render() {\n    return (\n      <div className=\"App\">\n        <h2>With filtering</h2>\n        <p>\n          Rich text pasted into this editor is filtered, keeping only the\n          formats available in the toolbar. Try it out with any of these\n          documents:\n        </p>\n        <ul className=\"list-inline\">\n          <li>\n            <a\n              className=\"link\"\n              href=\"https://docs.google.com/document/d/1YjqkIMC3q4jAzy__-S4fb6mC_w9EssmA6aZbGYWFv80/edit\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              Google Docs\n            </a>\n          </li>\n          <li>\n            <a\n              className=\"link\"\n              href=\"https://paper.dropbox.com/doc/Draft.js-paste-test-document-njfdkwmkeGQ9KICjVwLmU\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              Dropbox Paper\n            </a>\n          </li>\n          <li>\n            <a\n              className=\"link\"\n              href=\"https://1drv.ms/w/s!AuGin45FpiF5hjzm9QdWHYGqPrqm\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              Microsoft Word Online\n            </a>\n          </li>\n        </ul>\n\n        <FilterableEditor filtered={true} extended={false} />\n        <h2>Without filtering</h2>\n\n        <p>\n          All of the formatting preserved by Draft.js is preserved in the\n          editor.\n        </p>\n\n        <FilterableEditor filtered={false} extended={false} />\n\n        <h2>Going further</h2>\n        <p>\n          By default, Draft.js preserves quite a lot. Have a look at our&nbsp;\n          <a\n            className=\"link\"\n            href=\"https://github.com/thibaudcolas/draftjs-filters/tree/main/pasting\"\n          >\n            full test suite\n          </a>\n          , and if there is anything that is missing please&nbsp;\n          <a\n            className=\"link\"\n            href=\"https://github.com/thibaudcolas/draftjs-filters/issues\"\n          >\n            open an issue on GitHub\n          </a>\n          .\n        </p>\n        <p>\n          Here are more ready-made rich text paste testing documents should you\n          need them:\n        </p>\n        <ul className=\"list-inline\">\n          <li>\n            <a\n              className=\"link\"\n              href=\"https://github.com/thibaudcolas/draftjs-filters/blob/main/pasting/documents/Draft.js%20paste%20test%20document%20Word2010.docx\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              Microsoft Word 2010\n            </a>\n          </li>\n          <li>\n            <a\n              className=\"link\"\n              href=\"https://docs.google.com/document/d/1YjqkIMC3q4jAzy__-S4fb6mC_w9EssmA6aZbGYWFv80/edit\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              Google Docs\n            </a>\n          </li>\n          <li>\n            <a\n              className=\"link\"\n              href=\"https://paper.dropbox.com/doc/Draft.js-paste-test-document-njfdkwmkeGQ9KICjVwLmU\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              Dropbox Paper\n            </a>\n          </li>\n          <li>\n            <a\n              className=\"link\"\n              href=\"https://github.com/thibaudcolas/draftjs-filters/blob/main/pasting/documents/Draft.js%20paste%20test%20document.pages\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              Apple Pages\n            </a>\n          </li>\n          <li>\n            <a\n              className=\"link\"\n              href=\"https://github.com/thibaudcolas/draftjs-filters/blob/main/pasting/documents/Draft.js%20paste%20test%20document%20Word2016%20macOS.docx\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              Microsoft Word 2016 macOS\n            </a>\n          </li>\n          <li>\n            <a\n              className=\"link\"\n              href=\"https://1drv.ms/w/s!AuGin45FpiF5hjzm9QdWHYGqPrqm\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              Microsoft Word Online\n            </a>\n          </li>\n          <li>\n            <a\n              className=\"link\"\n              href=\"tests\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              HTML content\n            </a>\n          </li>\n        </ul>\n\n        <p>Here is an editor with more formatting enabled:</p>\n\n        <FilterableEditor filtered={false} extended={true} />\n\n        <h3>Clipboard log</h3>\n\n        <ClipboardLogger />\n      </div>\n    )\n  }\n}\n\nexport default App\n","// @flow\nimport React from \"react\"\nimport ReactDOM from \"react-dom\"\n\nimport \"normalize.css\"\n\nimport \"./demo/utils/elements.css\"\nimport \"./demo/utils/typography.css\"\nimport \"./demo/utils/layout.css\"\nimport \"./demo/utils/objects.css\"\n\nimport \"draft-js/dist/Draft.css\"\n\nimport \"./demo/components/header.css\"\nimport \"./demo/components/page-nav.css\"\n\nimport \"./demo/utils/utilities.css\"\n\nimport App from \"./demo/components/App\"\n\nconst mount = document.getElementById(\"root\")\n\nif (mount) {\n  ReactDOM.render(<App />, mount)\n}\n"],"sourceRoot":""}